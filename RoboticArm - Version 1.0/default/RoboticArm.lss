
RoboticArm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000746  000007da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000746  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800124  00800124  000007fe  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  000007fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000022b  00000000  00000000  0000083e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d07  00000000  00000000  00000a69  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002f8  00000000  00000000  00001770  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a0a  00000000  00000000  00001a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d0  00000000  00000000  00002474  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e7  00000000  00000000  00002644  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000889  00000000  00000000  0000292b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e4       	ldi	r30, 0x46	; 70
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 32       	cpi	r26, 0x24	; 36
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a4 e2       	ldi	r26, 0x24	; 36
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 33       	cpi	r26, 0x3E	; 62
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 52 02 	call	0x4a4	; 0x4a4 <main>
  c6:	0c 94 a1 03 	jmp	0x742	; 0x742 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <ButtonPressed>:
char Pressed[numberOfButtons];
int Pressed_Confidence_Level[numberOfButtons]; //Measure button press cofidence
int Released_Confidence_Level[numberOfButtons]; //Measure button release confidence

char ButtonPressed(int buttonNumber, unsigned char portBit)
{
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	ec 01       	movw	r28, r24
	if (bit_is_clear(pinOfButton, portBit))
  d4:	89 b3       	in	r24, 0x19	; 25
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <ButtonPressed+0x10>
  da:	95 95       	asr	r25
  dc:	87 95       	ror	r24
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <ButtonPressed+0xc>
  e2:	fe 01       	movw	r30, r28
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	80 fd       	sbrc	r24, 0
  ea:	1a c0       	rjmp	.+52     	; 0x120 <ButtonPressed+0x52>
	{
		Pressed_Confidence_Level[buttonNumber] ++;   //Increase Pressed Conficence
  ec:	df 01       	movw	r26, r30
  ee:	a1 5d       	subi	r26, 0xD1	; 209
  f0:	be 4f       	sbci	r27, 0xFE	; 254
  f2:	8d 91       	ld	r24, X+
  f4:	9c 91       	ld	r25, X
  f6:	11 97       	sbiw	r26, 0x01	; 1
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	11 96       	adiw	r26, 0x01	; 1
  fc:	9c 93       	st	X, r25
  fe:	8e 93       	st	-X, r24
		Released_Confidence_Level[buttonNumber] = 0; //Reset released button confidence since there is a button press
 100:	eb 5d       	subi	r30, 0xDB	; 219
 102:	fe 4f       	sbci	r31, 0xFE	; 254
 104:	11 82       	std	Z+1, r1	; 0x01
 106:	10 82       	st	Z, r1
		if (Pressed_Confidence_Level[buttonNumber] > confidenceLevel) //Indicator of good button press
 108:	85 5f       	subi	r24, 0xF5	; 245
 10a:	91 40       	sbci	r25, 0x01	; 1
 10c:	fc f0       	brlt	.+62     	; 0x14c <ButtonPressed+0x7e>
		{
			if (Pressed[buttonNumber] == 0)
 10e:	fe 01       	movw	r30, r28
 110:	e7 5c       	subi	r30, 0xC7	; 199
 112:	fe 4f       	sbci	r31, 0xFE	; 254
 114:	80 81       	ld	r24, Z
 116:	88 23       	and	r24, r24
 118:	b9 f4       	brne	.+46     	; 0x148 <ButtonPressed+0x7a>
			{
				Pressed[buttonNumber] = 1;
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	80 83       	st	Z, r24
 11e:	17 c0       	rjmp	.+46     	; 0x14e <ButtonPressed+0x80>
			Pressed_Confidence_Level[buttonNumber] = 0;
		}
	}
	else
	{
		Released_Confidence_Level[buttonNumber] ++; //This works just like the pressed
 120:	df 01       	movw	r26, r30
 122:	ab 5d       	subi	r26, 0xDB	; 219
 124:	be 4f       	sbci	r27, 0xFE	; 254
 126:	8d 91       	ld	r24, X+
 128:	9c 91       	ld	r25, X
 12a:	11 97       	sbiw	r26, 0x01	; 1
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	11 96       	adiw	r26, 0x01	; 1
 130:	9c 93       	st	X, r25
 132:	8e 93       	st	-X, r24
		Pressed_Confidence_Level[buttonNumber] = 0; //Reset pressed button confidence since the button is released
 134:	e1 5d       	subi	r30, 0xD1	; 209
 136:	fe 4f       	sbci	r31, 0xFE	; 254
 138:	11 82       	std	Z+1, r1	; 0x01
 13a:	10 82       	st	Z, r1
		if (Released_Confidence_Level[buttonNumber] > confidenceLevel)
 13c:	85 5f       	subi	r24, 0xF5	; 245
 13e:	91 40       	sbci	r25, 0x01	; 1
 140:	2c f0       	brlt	.+10     	; 0x14c <ButtonPressed+0x7e>
		{
			Pressed[buttonNumber] = 0;
 142:	c7 5c       	subi	r28, 0xC7	; 199
 144:	de 4f       	sbci	r29, 0xFE	; 254
 146:	18 82       	st	Y, r1
			Released_Confidence_Level[buttonNumber] = 0;
 148:	1d 92       	st	X+, r1
 14a:	1c 92       	st	X, r1
 14c:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return 0;
}
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	08 95       	ret

00000154 <init_buttons>:
} 

void init_buttons() 
{
	///set the buttons for output 
	DDRA &= ~(1 << PA0); DDRA &= ~(1 << PA1); DDRA &= ~(1 << PA2); 
 154:	d0 98       	cbi	0x1a, 0	; 26
 156:	d1 98       	cbi	0x1a, 1	; 26
 158:	d2 98       	cbi	0x1a, 2	; 26
	DDRA &= ~(1 << PA3); DDRA &= ~(1 << PA4); 
 15a:	d3 98       	cbi	0x1a, 3	; 26
 15c:	d4 98       	cbi	0x1a, 4	; 26
	
	///set the buttons high 
	PORTA |= (1 << PA0) | (1 << PA1) | (1 << PA2) | (1 << PA3) | (1 << PA4); 
 15e:	8b b3       	in	r24, 0x1b	; 27
 160:	8f 61       	ori	r24, 0x1F	; 31
 162:	8b bb       	out	0x1b, r24	; 27

	///the light for testing purposes...
	DDRA |= (1 << PA6); 
 164:	d6 9a       	sbi	0x1a, 6	; 26
	//PORTA |= (1 << PA6); 
}
 166:	08 95       	ret

00000168 <init_positions>:


void init_positions() 
{
	BASE 		= ANG_BASE_MID; 
 168:	84 eb       	ldi	r24, 0xB4	; 180
 16a:	91 e9       	ldi	r25, 0x91	; 145
 16c:	90 93 87 00 	sts	0x0087, r25
 170:	80 93 86 00 	sts	0x0086, r24
	SHOULDER 	= ANG_SHOULDER_MID; 
 174:	80 ec       	ldi	r24, 0xC0	; 192
 176:	9f e8       	ldi	r25, 0x8F	; 143
 178:	9b bd       	out	0x2b, r25	; 43
 17a:	8a bd       	out	0x2a, r24	; 42
	ELBOW 		= ANG_ELBOW_MID; 
 17c:	28 e8       	ldi	r18, 0x88	; 136
 17e:	30 e9       	ldi	r19, 0x90	; 144
 180:	39 bd       	out	0x29, r19	; 41
 182:	28 bd       	out	0x28, r18	; 40
	GRIP 		= ANG_GRIP_MIN;
 184:	88 e4       	ldi	r24, 0x48	; 72
 186:	9a e8       	ldi	r25, 0x8A	; 138
 188:	90 93 79 00 	sts	0x0079, r25
 18c:	80 93 78 00 	sts	0x0078, r24
	WRIST		= ANG_WRIST_MAX; 
 190:	30 93 85 00 	sts	0x0085, r19
 194:	20 93 84 00 	sts	0x0084, r18
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 19c:	20 ea       	ldi	r18, 0xA0	; 160
 19e:	3f e0       	ldi	r19, 0x0F	; 15
 1a0:	f9 01       	movw	r30, r18
 1a2:	31 97       	sbiw	r30, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <init_positions+0x3a>
}


void basic_delay(int duration) 
{
	for(int i=0; i < duration; i++ ) 
 1a6:	01 96       	adiw	r24, 0x01	; 1
 1a8:	41 e0       	ldi	r20, 0x01	; 1
 1aa:	8c 32       	cpi	r24, 0x2C	; 44
 1ac:	94 07       	cpc	r25, r20
 1ae:	c1 f7       	brne	.-16     	; 0x1a0 <init_positions+0x38>
	ELBOW 		= ANG_ELBOW_MID; 
	GRIP 		= ANG_GRIP_MIN;
	WRIST		= ANG_WRIST_MAX; 
	
	basic_delay(300); 
} 
 1b0:	08 95       	ret

000001b2 <process_mode>:


void process_mode(int mode) 
{
	switch(mode)
 1b2:	81 30       	cpi	r24, 0x01	; 1
 1b4:	91 05       	cpc	r25, r1
 1b6:	09 f4       	brne	.+2      	; 0x1ba <process_mode+0x8>
 1b8:	50 c0       	rjmp	.+160    	; 0x25a <process_mode+0xa8>
 1ba:	82 30       	cpi	r24, 0x02	; 2
 1bc:	91 05       	cpc	r25, r1
 1be:	09 f4       	brne	.+2      	; 0x1c2 <process_mode+0x10>
 1c0:	b6 c0       	rjmp	.+364    	; 0x32e <process_mode+0x17c>
 1c2:	89 2b       	or	r24, r25
 1c4:	a9 f0       	breq	.+42     	; 0x1f0 <process_mode+0x3e>
 1c6:	08 95       	ret
	{
		case GRIP_MODE: 
				///closes the grip 
				while(bit_is_clear(PINA, PA1))
				{
					if(!(GRIP < ANG_GRIP_MIN)) 
 1c8:	80 91 78 00 	lds	r24, 0x0078
 1cc:	90 91 79 00 	lds	r25, 0x0079
 1d0:	88 54       	subi	r24, 0x48	; 72
 1d2:	9a 48       	sbci	r25, 0x8A	; 138
 1d4:	78 f0       	brcs	.+30     	; 0x1f4 <process_mode+0x42>
					{ 
						GRIP--; 
 1d6:	80 91 78 00 	lds	r24, 0x0078
 1da:	90 91 79 00 	lds	r25, 0x0079
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	90 93 79 00 	sts	0x0079, r25
 1e4:	80 93 78 00 	sts	0x0078, r24
 1e8:	c9 01       	movw	r24, r18
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <process_mode+0x38>
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <process_mode+0x42>
 1f0:	20 ee       	ldi	r18, 0xE0	; 224
 1f2:	3e e2       	ldi	r19, 0x2E	; 46
{
	switch(mode)
	{
		case GRIP_MODE: 
				///closes the grip 
				while(bit_is_clear(PINA, PA1))
 1f4:	c9 9b       	sbis	0x19, 1	; 25
 1f6:	e8 cf       	rjmp	.-48     	; 0x1c8 <process_mode+0x16>
 1f8:	14 c0       	rjmp	.+40     	; 0x222 <process_mode+0x70>
					}
				}
				///opens the grip 
				while(bit_is_clear(PINA, PA3))
				{
					if(!(GRIP > ANG_GRIP_MAX)) 
 1fa:	80 91 78 00 	lds	r24, 0x0078
 1fe:	90 91 79 00 	lds	r25, 0x0079
 202:	89 51       	subi	r24, 0x19	; 25
 204:	92 49       	sbci	r25, 0x92	; 146
 206:	78 f4       	brcc	.+30     	; 0x226 <process_mode+0x74>
					{ 
						GRIP++; 
 208:	80 91 78 00 	lds	r24, 0x0078
 20c:	90 91 79 00 	lds	r25, 0x0079
 210:	01 96       	adiw	r24, 0x01	; 1
 212:	90 93 79 00 	sts	0x0079, r25
 216:	80 93 78 00 	sts	0x0078, r24
 21a:	c9 01       	movw	r24, r18
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <process_mode+0x6a>
 220:	02 c0       	rjmp	.+4      	; 0x226 <process_mode+0x74>
 222:	20 ee       	ldi	r18, 0xE0	; 224
 224:	3e e2       	ldi	r19, 0x2E	; 46
						GRIP--; 
						_delay_ms(3); //so it moves slow
					}
				}
				///opens the grip 
				while(bit_is_clear(PINA, PA3))
 226:	cb 9b       	sbis	0x19, 3	; 25
 228:	e8 cf       	rjmp	.-48     	; 0x1fa <process_mode+0x48>
 22a:	08 95       	ret

		case SHOULDER_MODE: 
			//lifts the shoulder upwards 
			while(bit_is_clear(PINA, PA0)) 
			{
				if(!(SHOULDER < ANG_SHOULDER_MIN)) //do not go more than the middle 
 22c:	8a b5       	in	r24, 0x2a	; 42
 22e:	9b b5       	in	r25, 0x2b	; 43
 230:	80 5a       	subi	r24, 0xA0	; 160
 232:	9c 48       	sbci	r25, 0x8C	; 140
 234:	a0 f0       	brcs	.+40     	; 0x25e <process_mode+0xac>
				{ 
					SHOULDER--; 
 236:	8a b5       	in	r24, 0x2a	; 42
 238:	9b b5       	in	r25, 0x2b	; 43
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	9b bd       	out	0x2b, r25	; 43
 23e:	8a bd       	out	0x2a, r24	; 42
					WRIST++; //keep wrist steady in the same position 
 240:	80 91 84 00 	lds	r24, 0x0084
 244:	90 91 85 00 	lds	r25, 0x0085
 248:	01 96       	adiw	r24, 0x01	; 1
 24a:	90 93 85 00 	sts	0x0085, r25
 24e:	80 93 84 00 	sts	0x0084, r24
 252:	c9 01       	movw	r24, r18
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <process_mode+0xa2>
 258:	02 c0       	rjmp	.+4      	; 0x25e <process_mode+0xac>
 25a:	20 ee       	ldi	r18, 0xE0	; 224
 25c:	3e e2       	ldi	r19, 0x2E	; 46
				}
			break; 

		case SHOULDER_MODE: 
			//lifts the shoulder upwards 
			while(bit_is_clear(PINA, PA0)) 
 25e:	c8 9b       	sbis	0x19, 0	; 25
 260:	e5 cf       	rjmp	.-54     	; 0x22c <process_mode+0x7a>
 262:	17 c0       	rjmp	.+46     	; 0x292 <process_mode+0xe0>
				}
			} 
			//pulls shoulder downwards 
			while(bit_is_clear(PINA, PA4))
			{
				if(!(SHOULDER > ANG_SHOULDER_MAX)) 
 264:	8a b5       	in	r24, 0x2a	; 42
 266:	9b b5       	in	r25, 0x2b	; 43
 268:	81 5e       	subi	r24, 0xE1	; 225
 26a:	92 49       	sbci	r25, 0x92	; 146
 26c:	a0 f4       	brcc	.+40     	; 0x296 <process_mode+0xe4>
				{ 
					SHOULDER++; 
 26e:	8a b5       	in	r24, 0x2a	; 42
 270:	9b b5       	in	r25, 0x2b	; 43
 272:	01 96       	adiw	r24, 0x01	; 1
 274:	9b bd       	out	0x2b, r25	; 43
 276:	8a bd       	out	0x2a, r24	; 42
					WRIST--; //keep wrist steady in the same position 
 278:	80 91 84 00 	lds	r24, 0x0084
 27c:	90 91 85 00 	lds	r25, 0x0085
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	90 93 85 00 	sts	0x0085, r25
 286:	80 93 84 00 	sts	0x0084, r24
 28a:	c9 01       	movw	r24, r18
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <process_mode+0xda>
 290:	02 c0       	rjmp	.+4      	; 0x296 <process_mode+0xe4>
 292:	20 ee       	ldi	r18, 0xE0	; 224
 294:	3e e2       	ldi	r19, 0x2E	; 46
					WRIST++; //keep wrist steady in the same position 
					_delay_ms(3); //so it moves slow
				}
			} 
			//pulls shoulder downwards 
			while(bit_is_clear(PINA, PA4))
 296:	cc 9b       	sbis	0x19, 4	; 25
 298:	e5 cf       	rjmp	.-54     	; 0x264 <process_mode+0xb2>
 29a:	14 c0       	rjmp	.+40     	; 0x2c4 <process_mode+0x112>
				}
			} 
			//rotate to the left
			while(bit_is_clear(PINA, PA1))
			{
				if(!(BASE < ANG_BASE_MIN)) 
 29c:	80 91 86 00 	lds	r24, 0x0086
 2a0:	90 91 87 00 	lds	r25, 0x0087
 2a4:	80 51       	subi	r24, 0x10	; 16
 2a6:	9b 48       	sbci	r25, 0x8B	; 139
 2a8:	78 f0       	brcs	.+30     	; 0x2c8 <process_mode+0x116>
				{ 
					BASE--; 
 2aa:	80 91 86 00 	lds	r24, 0x0086
 2ae:	90 91 87 00 	lds	r25, 0x0087
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	90 93 87 00 	sts	0x0087, r25
 2b8:	80 93 86 00 	sts	0x0086, r24
 2bc:	c9 01       	movw	r24, r18
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <process_mode+0x10c>
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <process_mode+0x116>
 2c4:	20 ee       	ldi	r18, 0xE0	; 224
 2c6:	3e e2       	ldi	r19, 0x2E	; 46
					WRIST--; //keep wrist steady in the same position 
					_delay_ms(3); //so it moves slow
				}
			} 
			//rotate to the left
			while(bit_is_clear(PINA, PA1))
 2c8:	c9 9b       	sbis	0x19, 1	; 25
 2ca:	e8 cf       	rjmp	.-48     	; 0x29c <process_mode+0xea>
 2cc:	14 c0       	rjmp	.+40     	; 0x2f6 <process_mode+0x144>
				}
			}
			//rotates to the right
			while(bit_is_clear(PINA, PA3))
			{
				if(!(BASE > ANG_BASE_MAX)) 
 2ce:	80 91 86 00 	lds	r24, 0x0086
 2d2:	90 91 87 00 	lds	r25, 0x0087
 2d6:	81 59       	subi	r24, 0x91	; 145
 2d8:	97 49       	sbci	r25, 0x97	; 151
 2da:	78 f4       	brcc	.+30     	; 0x2fa <process_mode+0x148>
				{ 
					BASE++; 
 2dc:	80 91 86 00 	lds	r24, 0x0086
 2e0:	90 91 87 00 	lds	r25, 0x0087
 2e4:	01 96       	adiw	r24, 0x01	; 1
 2e6:	90 93 87 00 	sts	0x0087, r25
 2ea:	80 93 86 00 	sts	0x0086, r24
 2ee:	c9 01       	movw	r24, r18
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <process_mode+0x13e>
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <process_mode+0x148>
 2f6:	20 ee       	ldi	r18, 0xE0	; 224
 2f8:	3e e2       	ldi	r19, 0x2E	; 46
					BASE--; 
					_delay_ms(3); //so it moves slow
				}
			}
			//rotates to the right
			while(bit_is_clear(PINA, PA3))
 2fa:	cb 9b       	sbis	0x19, 3	; 25
 2fc:	e8 cf       	rjmp	.-48     	; 0x2ce <process_mode+0x11c>
 2fe:	08 95       	ret

		case ELBOW_MODE: 
			//lifts the shoulder upwards 
			while(bit_is_clear(PINA, PA4)) 
			{
				if(!(ELBOW < ANG_ELBOW_MIN)) //do not go more than the middle 
 300:	88 b5       	in	r24, 0x28	; 40
 302:	99 b5       	in	r25, 0x29	; 41
 304:	80 5c       	subi	r24, 0xC0	; 192
 306:	9f 48       	sbci	r25, 0x8F	; 143
 308:	a0 f0       	brcs	.+40     	; 0x332 <process_mode+0x180>
				{ 
					ELBOW--; 
 30a:	88 b5       	in	r24, 0x28	; 40
 30c:	99 b5       	in	r25, 0x29	; 41
 30e:	01 97       	sbiw	r24, 0x01	; 1
 310:	99 bd       	out	0x29, r25	; 41
 312:	88 bd       	out	0x28, r24	; 40
					WRIST--; 
 314:	80 91 84 00 	lds	r24, 0x0084
 318:	90 91 85 00 	lds	r25, 0x0085
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	90 93 85 00 	sts	0x0085, r25
 322:	80 93 84 00 	sts	0x0084, r24
 326:	c9 01       	movw	r24, r18
 328:	01 97       	sbiw	r24, 0x01	; 1
 32a:	f1 f7       	brne	.-4      	; 0x328 <process_mode+0x176>
 32c:	02 c0       	rjmp	.+4      	; 0x332 <process_mode+0x180>
 32e:	20 ee       	ldi	r18, 0xE0	; 224
 330:	3e e2       	ldi	r19, 0x2E	; 46
			}
			break; 

		case ELBOW_MODE: 
			//lifts the shoulder upwards 
			while(bit_is_clear(PINA, PA4)) 
 332:	cc 9b       	sbis	0x19, 4	; 25
 334:	e5 cf       	rjmp	.-54     	; 0x300 <process_mode+0x14e>
 336:	17 c0       	rjmp	.+46     	; 0x366 <process_mode+0x1b4>
				}
			} 
			//pulls shoulder downwards 
			while(bit_is_clear(PINA, PA0))
			{
				if(!(ELBOW > ANG_ELBOW_MAX)) 
 338:	88 b5       	in	r24, 0x28	; 40
 33a:	99 b5       	in	r25, 0x29	; 41
 33c:	81 50       	subi	r24, 0x01	; 1
 33e:	96 49       	sbci	r25, 0x96	; 150
 340:	a0 f4       	brcc	.+40     	; 0x36a <process_mode+0x1b8>
				{ 
					ELBOW++; 
 342:	88 b5       	in	r24, 0x28	; 40
 344:	99 b5       	in	r25, 0x29	; 41
 346:	01 96       	adiw	r24, 0x01	; 1
 348:	99 bd       	out	0x29, r25	; 41
 34a:	88 bd       	out	0x28, r24	; 40
					WRIST++; 
 34c:	80 91 84 00 	lds	r24, 0x0084
 350:	90 91 85 00 	lds	r25, 0x0085
 354:	01 96       	adiw	r24, 0x01	; 1
 356:	90 93 85 00 	sts	0x0085, r25
 35a:	80 93 84 00 	sts	0x0084, r24
 35e:	c9 01       	movw	r24, r18
 360:	01 97       	sbiw	r24, 0x01	; 1
 362:	f1 f7       	brne	.-4      	; 0x360 <process_mode+0x1ae>
 364:	02 c0       	rjmp	.+4      	; 0x36a <process_mode+0x1b8>
 366:	20 ee       	ldi	r18, 0xE0	; 224
 368:	3e e2       	ldi	r19, 0x2E	; 46
					WRIST--; 
					_delay_ms(3); //so it moves slow
				}
			} 
			//pulls shoulder downwards 
			while(bit_is_clear(PINA, PA0))
 36a:	c8 9b       	sbis	0x19, 0	; 25
 36c:	e5 cf       	rjmp	.-54     	; 0x338 <process_mode+0x186>
 36e:	14 c0       	rjmp	.+40     	; 0x398 <process_mode+0x1e6>
			} 

			//rotate to the left
			while(bit_is_clear(PINA, PA1))
			{
				if(!(BASE < ANG_BASE_MIN)) 
 370:	80 91 86 00 	lds	r24, 0x0086
 374:	90 91 87 00 	lds	r25, 0x0087
 378:	80 51       	subi	r24, 0x10	; 16
 37a:	9b 48       	sbci	r25, 0x8B	; 139
 37c:	78 f0       	brcs	.+30     	; 0x39c <process_mode+0x1ea>
				{ 
					BASE--; 
 37e:	80 91 86 00 	lds	r24, 0x0086
 382:	90 91 87 00 	lds	r25, 0x0087
 386:	01 97       	sbiw	r24, 0x01	; 1
 388:	90 93 87 00 	sts	0x0087, r25
 38c:	80 93 86 00 	sts	0x0086, r24
 390:	c9 01       	movw	r24, r18
 392:	01 97       	sbiw	r24, 0x01	; 1
 394:	f1 f7       	brne	.-4      	; 0x392 <process_mode+0x1e0>
 396:	02 c0       	rjmp	.+4      	; 0x39c <process_mode+0x1ea>
 398:	20 ee       	ldi	r18, 0xE0	; 224
 39a:	3e e2       	ldi	r19, 0x2E	; 46
					_delay_ms(3); //so it moves slow
				}
			} 

			//rotate to the left
			while(bit_is_clear(PINA, PA1))
 39c:	c9 9b       	sbis	0x19, 1	; 25
 39e:	e8 cf       	rjmp	.-48     	; 0x370 <process_mode+0x1be>
 3a0:	14 c0       	rjmp	.+40     	; 0x3ca <process_mode+0x218>
				}
			}
			//rotates to the right
			while(bit_is_clear(PINA, PA3))
			{
				if(!(BASE > ANG_BASE_MAX)) 
 3a2:	80 91 86 00 	lds	r24, 0x0086
 3a6:	90 91 87 00 	lds	r25, 0x0087
 3aa:	81 59       	subi	r24, 0x91	; 145
 3ac:	97 49       	sbci	r25, 0x97	; 151
 3ae:	78 f4       	brcc	.+30     	; 0x3ce <process_mode+0x21c>
				{ 
					BASE++; 
 3b0:	80 91 86 00 	lds	r24, 0x0086
 3b4:	90 91 87 00 	lds	r25, 0x0087
 3b8:	01 96       	adiw	r24, 0x01	; 1
 3ba:	90 93 87 00 	sts	0x0087, r25
 3be:	80 93 86 00 	sts	0x0086, r24
 3c2:	c9 01       	movw	r24, r18
 3c4:	01 97       	sbiw	r24, 0x01	; 1
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <process_mode+0x212>
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <process_mode+0x21c>
 3ca:	20 ee       	ldi	r18, 0xE0	; 224
 3cc:	3e e2       	ldi	r19, 0x2E	; 46
					BASE--; 
					_delay_ms(3); //so it moves slow
				}
			}
			//rotates to the right
			while(bit_is_clear(PINA, PA3))
 3ce:	cb 9b       	sbis	0x19, 3	; 25
 3d0:	e8 cf       	rjmp	.-48     	; 0x3a2 <process_mode+0x1f0>
 3d2:	08 95       	ret

000003d4 <basic_delay>:
	else {/*just empty*/}
}


void basic_delay(int duration) 
{
 3d4:	20 e0       	ldi	r18, 0x00	; 0
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	40 ea       	ldi	r20, 0xA0	; 160
 3da:	5f e0       	ldi	r21, 0x0F	; 15
 3dc:	05 c0       	rjmp	.+10     	; 0x3e8 <basic_delay+0x14>
 3de:	fa 01       	movw	r30, r20
 3e0:	31 97       	sbiw	r30, 0x01	; 1
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <basic_delay+0xc>
	for(int i=0; i < duration; i++ ) 
 3e4:	2f 5f       	subi	r18, 0xFF	; 255
 3e6:	3f 4f       	sbci	r19, 0xFF	; 255
 3e8:	28 17       	cp	r18, r24
 3ea:	39 07       	cpc	r19, r25
 3ec:	c4 f3       	brlt	.-16     	; 0x3de <basic_delay+0xa>
	{
		_delay_ms(1); 
	}
}
 3ee:	08 95       	ret

000003f0 <change_mode>:
}


void change_mode()
{
	LCDclr(); 
 3f0:	0e 94 d7 02 	call	0x5ae	; 0x5ae <LCDclr>
	if(currentMode == GRIP_MODE)
 3f4:	80 91 24 01 	lds	r24, 0x0124
 3f8:	88 23       	and	r24, r24
 3fa:	39 f4       	brne	.+14     	; 0x40a <change_mode+0x1a>
	{
		currentMode = SHOULDER_MODE; 
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	80 93 24 01 	sts	0x0124, r24
		LCDstring("SHOULDER MODE", 13); 
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	91 e0       	ldi	r25, 0x01	; 1
 406:	6d e0       	ldi	r22, 0x0D	; 13
 408:	08 c0       	rjmp	.+16     	; 0x41a <change_mode+0x2a>
		PORTA |= (1 << PA6); //light on for lift mode
	} 
	else if(currentMode == SHOULDER_MODE)
 40a:	81 30       	cpi	r24, 0x01	; 1
 40c:	51 f4       	brne	.+20     	; 0x422 <change_mode+0x32>
	{
		currentMode = ELBOW_MODE; 
 40e:	82 e0       	ldi	r24, 0x02	; 2
 410:	80 93 24 01 	sts	0x0124, r24
		LCDstring("ELBOW MODE", 10); 
 414:	8e e0       	ldi	r24, 0x0E	; 14
 416:	91 e0       	ldi	r25, 0x01	; 1
 418:	6a e0       	ldi	r22, 0x0A	; 10
 41a:	0e 94 df 02 	call	0x5be	; 0x5be <LCDstring>
		PORTA |= (1 << PA6); 	//light off for grip mode
 41e:	de 9a       	sbi	0x1b, 6	; 27
 420:	08 95       	ret
	} 
	else if(currentMode == ELBOW_MODE) 
 422:	82 30       	cpi	r24, 0x02	; 2
 424:	41 f4       	brne	.+16     	; 0x436 <change_mode+0x46>
	{
		currentMode = GRIP_MODE; 
 426:	10 92 24 01 	sts	0x0124, r1
		LCDstring("GRIP MODE", 9); 
 42a:	89 e1       	ldi	r24, 0x19	; 25
 42c:	91 e0       	ldi	r25, 0x01	; 1
 42e:	69 e0       	ldi	r22, 0x09	; 9
 430:	0e 94 df 02 	call	0x5be	; 0x5be <LCDstring>
		PORTA &= ~(1 << PA6);
 434:	de 98       	cbi	0x1b, 6	; 27
 436:	08 95       	ret

00000438 <init>:



void init() 
{
	TCCR1A |= (1 << WGM11); 
 438:	8f b5       	in	r24, 0x2f	; 47
 43a:	82 60       	ori	r24, 0x02	; 2
 43c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12) | (1 << WGM13); 
 43e:	8e b5       	in	r24, 0x2e	; 46
 440:	88 61       	ori	r24, 0x18	; 24
 442:	8e bd       	out	0x2e, r24	; 46

	TCCR3A |= (1 << WGM31); 
 444:	eb e8       	ldi	r30, 0x8B	; 139
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	80 81       	ld	r24, Z
 44a:	82 60       	ori	r24, 0x02	; 2
 44c:	80 83       	st	Z, r24
	TCCR3B |= (1 <<WGM32) | (1 <<WGM33); 
 44e:	aa e8       	ldi	r26, 0x8A	; 138
 450:	b0 e0       	ldi	r27, 0x00	; 0
 452:	8c 91       	ld	r24, X
 454:	88 61       	ori	r24, 0x18	; 24
 456:	8c 93       	st	X, r24

	TCCR1A |= (1 << COM1A1) | (1 <<COM1A0) | (1 <<COM1B1) | (1 <<COM1B0) | (1 << COM1C1) | (1 <<COM1C0);  
 458:	8f b5       	in	r24, 0x2f	; 47
 45a:	8c 6f       	ori	r24, 0xFC	; 252
 45c:	8f bd       	out	0x2f, r24	; 47
	TCCR3A |= (1 << COM3A1) | (1 << COM3A0) | (1 << COM3B1) | (1 << COM3B0); 
 45e:	80 81       	ld	r24, Z
 460:	80 6f       	ori	r24, 0xF0	; 240
 462:	80 83       	st	Z, r24

	TCCR1B |= (1 << CS11); 
 464:	8e b5       	in	r24, 0x2e	; 46
 466:	82 60       	ori	r24, 0x02	; 2
 468:	8e bd       	out	0x2e, r24	; 46
	TCCR3B |= (1 << CS31); 
 46a:	8c 91       	ld	r24, X
 46c:	82 60       	ori	r24, 0x02	; 2
 46e:	8c 93       	st	X, r24
	
	ICR3 = 40000; 
 470:	80 e4       	ldi	r24, 0x40	; 64
 472:	9c e9       	ldi	r25, 0x9C	; 156
 474:	90 93 81 00 	sts	0x0081, r25
 478:	80 93 80 00 	sts	0x0080, r24
	ICR1 = 40000; 
 47c:	97 bd       	out	0x27, r25	; 39
 47e:	86 bd       	out	0x26, r24	; 38

	//set PWM pins as output 
	DDRB |= (1 << 5) | (1 << 6) | (1 << 7);  
 480:	87 b3       	in	r24, 0x17	; 23
 482:	80 6e       	ori	r24, 0xE0	; 224
 484:	87 bb       	out	0x17, r24	; 23
	DDRE |= (1 << 3) | (1 << 4); 
 486:	82 b1       	in	r24, 0x02	; 2
 488:	88 61       	ori	r24, 0x18	; 24
 48a:	82 b9       	out	0x02, r24	; 2

	LCDinit(); 
 48c:	0e 94 a5 02 	call	0x54a	; 0x54a <LCDinit>
	LCDclr();  
 490:	0e 94 d7 02 	call	0x5ae	; 0x5ae <LCDclr>
	LCDcursorOFF(); 
 494:	0e 94 79 03 	call	0x6f2	; 0x6f2 <LCDcursorOFF>
	LCDstring("GRIP MODE", 9); 
 498:	89 e1       	ldi	r24, 0x19	; 25
 49a:	91 e0       	ldi	r25, 0x01	; 1
 49c:	69 e0       	ldi	r22, 0x09	; 9
 49e:	0e 94 df 02 	call	0x5be	; 0x5be <LCDstring>
} 
 4a2:	08 95       	ret

000004a4 <main>:

t_Mode currentMode = GRIP_MODE; 

int main()
{
	init(); 
 4a4:	0e 94 1c 02 	call	0x438	; 0x438 <init>
	init_positions(); 
 4a8:	0e 94 b4 00 	call	0x168	; 0x168 <init_positions>
	init_buttons(); 
 4ac:	0e 94 aa 00 	call	0x154	; 0x154 <init_buttons>

	while(1)
	{		
		if(ButtonPressed(BUTTON3, PA2))
 4b0:	82 e0       	ldi	r24, 0x02	; 2
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	62 e0       	ldi	r22, 0x02	; 2
 4b6:	0e 94 67 00 	call	0xce	; 0xce <ButtonPressed>
 4ba:	88 23       	and	r24, r24
 4bc:	11 f0       	breq	.+4      	; 0x4c2 <main+0x1e>
		{
			change_mode(); 
 4be:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <change_mode>
		}
		
		process_mode(currentMode); 
 4c2:	80 91 24 01 	lds	r24, 0x0124
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <process_mode>
 4cc:	f1 cf       	rjmp	.-30     	; 0x4b0 <main+0xc>

000004ce <LCDsendChar>:
#include <avr/pgmspace.h>
#include <util/delay.h>

void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{
	LDP=(ch&0b11110000);
 4ce:	28 2f       	mov	r18, r24
 4d0:	20 7f       	andi	r18, 0xF0	; 240
 4d2:	25 bb       	out	0x15, r18	; 21
	LCP|=1<<LCD_RS;
 4d4:	a8 9a       	sbi	0x15, 0	; 21
	LCP|=1<<LCD_E;		
 4d6:	aa 9a       	sbi	0x15, 2	; 21
 4d8:	20 ea       	ldi	r18, 0xA0	; 160
 4da:	3f e0       	ldi	r19, 0x0F	; 15
 4dc:	f9 01       	movw	r30, r18
 4de:	31 97       	sbiw	r30, 0x01	; 1
 4e0:	f1 f7       	brne	.-4      	; 0x4de <LCDsendChar+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
 4e2:	aa 98       	cbi	0x15, 2	; 21
	LCP&=~(1<<LCD_RS);
 4e4:	a8 98       	cbi	0x15, 0	; 21
 4e6:	f9 01       	movw	r30, r18
 4e8:	31 97       	sbiw	r30, 0x01	; 1
 4ea:	f1 f7       	brne	.-4      	; 0x4e8 <LCDsendChar+0x1a>
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	44 e0       	ldi	r20, 0x04	; 4
 4f0:	88 0f       	add	r24, r24
 4f2:	99 1f       	adc	r25, r25
 4f4:	4a 95       	dec	r20
 4f6:	e1 f7       	brne	.-8      	; 0x4f0 <LCDsendChar+0x22>
 4f8:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_RS;
 4fa:	a8 9a       	sbi	0x15, 0	; 21
	LCP|=1<<LCD_E;		
 4fc:	aa 9a       	sbi	0x15, 2	; 21
 4fe:	c9 01       	movw	r24, r18
 500:	01 97       	sbiw	r24, 0x01	; 1
 502:	f1 f7       	brne	.-4      	; 0x500 <LCDsendChar+0x32>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
 504:	aa 98       	cbi	0x15, 2	; 21
	LCP&=~(1<<LCD_RS);
 506:	a8 98       	cbi	0x15, 0	; 21
 508:	c9 01       	movw	r24, r18
 50a:	01 97       	sbiw	r24, 0x01	; 1
 50c:	f1 f7       	brne	.-4      	; 0x50a <LCDsendChar+0x3c>
	_delay_ms(1);
}
 50e:	08 95       	ret

00000510 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
	LDP=(cmd&0b11110000);
 510:	28 2f       	mov	r18, r24
 512:	20 7f       	andi	r18, 0xF0	; 240
 514:	25 bb       	out	0x15, r18	; 21
	LCP|=1<<LCD_E;		
 516:	aa 9a       	sbi	0x15, 2	; 21
 518:	20 ea       	ldi	r18, 0xA0	; 160
 51a:	3f e0       	ldi	r19, 0x0F	; 15
 51c:	f9 01       	movw	r30, r18
 51e:	31 97       	sbiw	r30, 0x01	; 1
 520:	f1 f7       	brne	.-4      	; 0x51e <LCDsendCommand+0xe>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 522:	aa 98       	cbi	0x15, 2	; 21
 524:	f9 01       	movw	r30, r18
 526:	31 97       	sbiw	r30, 0x01	; 1
 528:	f1 f7       	brne	.-4      	; 0x526 <LCDsendCommand+0x16>
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	54 e0       	ldi	r21, 0x04	; 4
 52e:	88 0f       	add	r24, r24
 530:	99 1f       	adc	r25, r25
 532:	5a 95       	dec	r21
 534:	e1 f7       	brne	.-8      	; 0x52e <LCDsendCommand+0x1e>
 536:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E;		
 538:	aa 9a       	sbi	0x15, 2	; 21
 53a:	c9 01       	movw	r24, r18
 53c:	01 97       	sbiw	r24, 0x01	; 1
 53e:	f1 f7       	brne	.-4      	; 0x53c <LCDsendCommand+0x2c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 540:	aa 98       	cbi	0x15, 2	; 21
 542:	c9 01       	movw	r24, r18
 544:	01 97       	sbiw	r24, 0x01	; 1
 546:	f1 f7       	brne	.-4      	; 0x544 <LCDsendCommand+0x34>
	_delay_ms(1);
}
 548:	08 95       	ret

0000054a <LCDinit>:
 54a:	80 e6       	ldi	r24, 0x60	; 96
 54c:	9a ee       	ldi	r25, 0xEA	; 234
 54e:	01 97       	sbiw	r24, 0x01	; 1
 550:	f1 f7       	brne	.-4      	; 0x54e <LCDinit+0x4>
void LCDinit(void)//Initializes LCD
{
	_delay_ms(15);
	LDP=0x00;
 552:	15 ba       	out	0x15, r1	; 21
	LCP=0x00;
 554:	15 ba       	out	0x15, r1	; 21
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
 556:	84 b3       	in	r24, 0x14	; 20
 558:	80 6f       	ori	r24, 0xF0	; 240
 55a:	84 bb       	out	0x14, r24	; 20
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 55c:	84 b3       	in	r24, 0x14	; 20
 55e:	87 60       	ori	r24, 0x07	; 7
 560:	84 bb       	out	0x14, r24	; 20
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 562:	80 e3       	ldi	r24, 0x30	; 48
 564:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 566:	aa 9a       	sbi	0x15, 2	; 21
 568:	20 ea       	ldi	r18, 0xA0	; 160
 56a:	3f e0       	ldi	r19, 0x0F	; 15
 56c:	f9 01       	movw	r30, r18
 56e:	31 97       	sbiw	r30, 0x01	; 1
 570:	f1 f7       	brne	.-4      	; 0x56e <LCDinit+0x24>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 572:	aa 98       	cbi	0x15, 2	; 21
 574:	f9 01       	movw	r30, r18
 576:	31 97       	sbiw	r30, 0x01	; 1
 578:	f1 f7       	brne	.-4      	; 0x576 <LCDinit+0x2c>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
 57a:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 57c:	aa 9a       	sbi	0x15, 2	; 21
 57e:	c9 01       	movw	r24, r18
 580:	01 97       	sbiw	r24, 0x01	; 1
 582:	f1 f7       	brne	.-4      	; 0x580 <LCDinit+0x36>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 584:	aa 98       	cbi	0x15, 2	; 21
 586:	c9 01       	movw	r24, r18
 588:	01 97       	sbiw	r24, 0x01	; 1
 58a:	f1 f7       	brne	.-4      	; 0x588 <LCDinit+0x3e>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
 58c:	80 e2       	ldi	r24, 0x20	; 32
 58e:	85 bb       	out	0x15, r24	; 21
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 590:	aa 9a       	sbi	0x15, 2	; 21
 592:	c9 01       	movw	r24, r18
 594:	01 97       	sbiw	r24, 0x01	; 1
 596:	f1 f7       	brne	.-4      	; 0x594 <LCDinit+0x4a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 598:	aa 98       	cbi	0x15, 2	; 21
 59a:	c9 01       	movw	r24, r18
 59c:	01 97       	sbiw	r24, 0x01	; 1
 59e:	f1 f7       	brne	.-4      	; 0x59c <LCDinit+0x52>
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
 5a0:	88 e2       	ldi	r24, 0x28	; 40
 5a2:	0e 94 88 02 	call	0x510	; 0x510 <LCDsendCommand>
   //-----increment address, cursor shift------
	LCDsendCommand(0b00001110);
 5a6:	8e e0       	ldi	r24, 0x0E	; 14
 5a8:	0e 94 88 02 	call	0x510	; 0x510 <LCDsendCommand>


}			
 5ac:	08 95       	ret

000005ae <LCDclr>:
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	0e 94 88 02 	call	0x510	; 0x510 <LCDsendCommand>
}
 5b4:	08 95       	ret

000005b6 <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
 5b6:	82 e0       	ldi	r24, 0x02	; 2
 5b8:	0e 94 88 02 	call	0x510	; 0x510 <LCDsendCommand>
}
 5bc:	08 95       	ret

000005be <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
 5be:	0f 93       	push	r16
 5c0:	1f 93       	push	r17
 5c2:	cf 93       	push	r28
 5c4:	df 93       	push	r29
 5c6:	06 2f       	mov	r16, r22
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
 5c8:	00 97       	sbiw	r24, 0x00	; 0
 5ca:	49 f0       	breq	.+18     	; 0x5de <LCDstring+0x20>
 5cc:	ec 01       	movw	r28, r24
 5ce:	10 e0       	ldi	r17, 0x00	; 0
 5d0:	04 c0       	rjmp	.+8      	; 0x5da <LCDstring+0x1c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
 5d2:	89 91       	ld	r24, Y+
 5d4:	0e 94 67 02 	call	0x4ce	; 0x4ce <LCDsendChar>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
 5d8:	1f 5f       	subi	r17, 0xFF	; 255
 5da:	10 17       	cp	r17, r16
 5dc:	d0 f3       	brcs	.-12     	; 0x5d2 <LCDstring+0x14>
	{
		LCDsendChar(data[i]);
	}
}
 5de:	df 91       	pop	r29
 5e0:	cf 91       	pop	r28
 5e2:	1f 91       	pop	r17
 5e4:	0f 91       	pop	r16
 5e6:	08 95       	ret

000005e8 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
 5e8:	62 30       	cpi	r22, 0x02	; 2
 5ea:	31 f0       	breq	.+12     	; 0x5f8 <LCDGotoXY+0x10>
 5ec:	63 30       	cpi	r22, 0x03	; 3
 5ee:	31 f0       	breq	.+12     	; 0x5fc <LCDGotoXY+0x14>
 5f0:	61 30       	cpi	r22, 0x01	; 1
 5f2:	29 f4       	brne	.+10     	; 0x5fe <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
 5f4:	80 5c       	subi	r24, 0xC0	; 192
 5f6:	03 c0       	rjmp	.+6      	; 0x5fe <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
 5f8:	8c 5e       	subi	r24, 0xEC	; 236
 5fa:	01 c0       	rjmp	.+2      	; 0x5fe <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
 5fc:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
 5fe:	80 68       	ori	r24, 0x80	; 128
 600:	0e 94 88 02 	call	0x510	; 0x510 <LCDsendCommand>
	
}
 604:	08 95       	ret

00000606 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
 606:	1f 93       	push	r17
 608:	cf 93       	push	r28
 60a:	df 93       	push	r29
 60c:	ec 01       	movw	r28, r24
 60e:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
 610:	64 2f       	mov	r22, r20
 612:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <LCDGotoXY>
 616:	10 e0       	ldi	r17, 0x00	; 0
 618:	03 c0       	rjmp	.+6      	; 0x620 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
 61a:	0e 94 67 02 	call	0x4ce	; 0x4ce <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
 61e:	1f 5f       	subi	r17, 0xFF	; 255
 620:	fe 01       	movw	r30, r28
 622:	e1 0f       	add	r30, r17
 624:	f1 1d       	adc	r31, r1
 626:	84 91       	lpm	r24, Z+
 628:	88 23       	and	r24, r24
 62a:	b9 f7       	brne	.-18     	; 0x61a <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 62c:	df 91       	pop	r29
 62e:	cf 91       	pop	r28
 630:	1f 91       	pop	r17
 632:	08 95       	ret

00000634 <CopyStringtoLCD2>:
void CopyStringtoLCD2(char *FlashLoc, uint8_t x, uint8_t y)
{
 634:	1f 93       	push	r17
 636:	cf 93       	push	r28
 638:	df 93       	push	r29
 63a:	ec 01       	movw	r28, r24
 63c:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
 63e:	64 2f       	mov	r22, r20
 640:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <LCDGotoXY>
 644:	10 e0       	ldi	r17, 0x00	; 0
 646:	03 c0       	rjmp	.+6      	; 0x64e <CopyStringtoLCD2+0x1a>
	for(i=0;FlashLoc[i];i++)
	{
		LCDsendChar(FlashLoc[i]);
 648:	0e 94 67 02 	call	0x4ce	; 0x4ce <LCDsendChar>
}
void CopyStringtoLCD2(char *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;FlashLoc[i];i++)
 64c:	1f 5f       	subi	r17, 0xFF	; 255
 64e:	fe 01       	movw	r30, r28
 650:	e1 0f       	add	r30, r17
 652:	f1 1d       	adc	r31, r1
 654:	80 81       	ld	r24, Z
 656:	88 23       	and	r24, r24
 658:	b9 f7       	brne	.-18     	; 0x648 <CopyStringtoLCD2+0x14>
	{
		LCDsendChar(FlashLoc[i]);
	}
}
 65a:	df 91       	pop	r29
 65c:	cf 91       	pop	r28
 65e:	1f 91       	pop	r17
 660:	08 95       	ret

00000662 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 662:	ef 92       	push	r14
 664:	ff 92       	push	r15
 666:	0f 93       	push	r16
 668:	1f 93       	push	r17
 66a:	cf 93       	push	r28
 66c:	df 93       	push	r29
 66e:	7c 01       	movw	r14, r24
 670:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 672:	11 0f       	add	r17, r17
 674:	11 0f       	add	r17, r17
 676:	11 0f       	add	r17, r17
 678:	10 64       	ori	r17, 0x40	; 64
 67a:	c0 e0       	ldi	r28, 0x00	; 0
 67c:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
 67e:	f7 01       	movw	r30, r14
 680:	ec 0f       	add	r30, r28
 682:	fd 1f       	adc	r31, r29
 684:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
 686:	81 2f       	mov	r24, r17
 688:	8c 0f       	add	r24, r28
 68a:	0e 94 88 02 	call	0x510	; 0x510 <LCDsendCommand>
		LCDsendChar(pcc);
 68e:	80 2f       	mov	r24, r16
 690:	0e 94 67 02 	call	0x4ce	; 0x4ce <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 694:	21 96       	adiw	r28, 0x01	; 1
 696:	c8 30       	cpi	r28, 0x08	; 8
 698:	d1 05       	cpc	r29, r1
 69a:	89 f7       	brne	.-30     	; 0x67e <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 69c:	df 91       	pop	r29
 69e:	cf 91       	pop	r28
 6a0:	1f 91       	pop	r17
 6a2:	0f 91       	pop	r16
 6a4:	ff 90       	pop	r15
 6a6:	ef 90       	pop	r14
 6a8:	08 95       	ret

000006aa <LCDshiftLeft>:

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
 6aa:	0f 93       	push	r16
 6ac:	1f 93       	push	r17
 6ae:	08 2f       	mov	r16, r24
 6b0:	10 e0       	ldi	r17, 0x00	; 0
 6b2:	04 c0       	rjmp	.+8      	; 0x6bc <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
 6b4:	8e e1       	ldi	r24, 0x1E	; 30
 6b6:	0e 94 88 02 	call	0x510	; 0x510 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
 6ba:	1f 5f       	subi	r17, 0xFF	; 255
 6bc:	10 17       	cp	r17, r16
 6be:	d0 f3       	brcs	.-12     	; 0x6b4 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
 6c0:	1f 91       	pop	r17
 6c2:	0f 91       	pop	r16
 6c4:	08 95       	ret

000006c6 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
 6c6:	0f 93       	push	r16
 6c8:	1f 93       	push	r17
 6ca:	08 2f       	mov	r16, r24
 6cc:	10 e0       	ldi	r17, 0x00	; 0
 6ce:	04 c0       	rjmp	.+8      	; 0x6d8 <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
 6d0:	88 e1       	ldi	r24, 0x18	; 24
 6d2:	0e 94 88 02 	call	0x510	; 0x510 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
 6d6:	1f 5f       	subi	r17, 0xFF	; 255
 6d8:	10 17       	cp	r17, r16
 6da:	d0 f3       	brcs	.-12     	; 0x6d0 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
 6dc:	1f 91       	pop	r17
 6de:	0f 91       	pop	r16
 6e0:	08 95       	ret

000006e2 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
 6e2:	8e e0       	ldi	r24, 0x0E	; 14
 6e4:	0e 94 88 02 	call	0x510	; 0x510 <LCDsendCommand>
}
 6e8:	08 95       	ret

000006ea <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
 6ea:	8f e0       	ldi	r24, 0x0F	; 15
 6ec:	0e 94 88 02 	call	0x510	; 0x510 <LCDsendCommand>
}
 6f0:	08 95       	ret

000006f2 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
 6f2:	8c e0       	ldi	r24, 0x0C	; 12
 6f4:	0e 94 88 02 	call	0x510	; 0x510 <LCDsendCommand>
}
 6f8:	08 95       	ret

000006fa <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
 6fa:	88 e0       	ldi	r24, 0x08	; 8
 6fc:	0e 94 88 02 	call	0x510	; 0x510 <LCDsendCommand>
}
 700:	08 95       	ret

00000702 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
 702:	8c e0       	ldi	r24, 0x0C	; 12
 704:	0e 94 88 02 	call	0x510	; 0x510 <LCDsendCommand>
}
 708:	08 95       	ret

0000070a <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
 70a:	0f 93       	push	r16
 70c:	1f 93       	push	r17
 70e:	08 2f       	mov	r16, r24
 710:	10 e0       	ldi	r17, 0x00	; 0
 712:	04 c0       	rjmp	.+8      	; 0x71c <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
 714:	80 e1       	ldi	r24, 0x10	; 16
 716:	0e 94 88 02 	call	0x510	; 0x510 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
 71a:	1f 5f       	subi	r17, 0xFF	; 255
 71c:	10 17       	cp	r17, r16
 71e:	d0 f3       	brcs	.-12     	; 0x714 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
 720:	1f 91       	pop	r17
 722:	0f 91       	pop	r16
 724:	08 95       	ret

00000726 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
 726:	0f 93       	push	r16
 728:	1f 93       	push	r17
 72a:	08 2f       	mov	r16, r24
 72c:	10 e0       	ldi	r17, 0x00	; 0
 72e:	04 c0       	rjmp	.+8      	; 0x738 <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
 730:	84 e1       	ldi	r24, 0x14	; 20
 732:	0e 94 88 02 	call	0x510	; 0x510 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
 736:	1f 5f       	subi	r17, 0xFF	; 255
 738:	10 17       	cp	r17, r16
 73a:	d0 f3       	brcs	.-12     	; 0x730 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
 73c:	1f 91       	pop	r17
 73e:	0f 91       	pop	r16
 740:	08 95       	ret

00000742 <_exit>:
 742:	f8 94       	cli

00000744 <__stop_program>:
 744:	ff cf       	rjmp	.-2      	; 0x744 <__stop_program>
